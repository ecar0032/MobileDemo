{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport PropTypes from 'prop-types';\nimport { roundForPercentage } from \"../shared/methods\";\nexport var calculateStretchLength = function calculateStretchLength(totalLength, minimalElementLength) {\n  var w = 100 / (Math.floor(totalLength / minimalElementLength) || 1);\n  return roundForPercentage(w) / 100 * totalLength;\n};\nexport var warn = function warn(shouldWarn, message) {\n  if (shouldWarn) {\n    console.warn(message);\n  }\n};\nexport var checkInsideGrid = function checkInsideGrid(ProvidedProp) {\n  return function (props, propName, componentName) {\n    var prop = props[propName];\n\n    if (typeof prop === 'undefined') {\n      return new Error(\"Component `\" + componentName + \"` is rendered outside of `Grid`.\");\n    }\n\n    return PropTypes.checkPropTypes(_defineProperty({}, propName, ProvidedProp), _defineProperty({}, propName, prop), propName, componentName);\n  };\n};","map":{"version":3,"sources":["C:/Users/mikea/Documents/GitHub/MobileDemo/Demo/MobileDemo/node_modules/react-native-responsive-layout/src/utils/index.js"],"names":["PropTypes","roundForPercentage","calculateStretchLength","totalLength","minimalElementLength","w","Math","floor","warn","shouldWarn","message","console","checkInsideGrid","ProvidedProp","props","propName","componentName","prop","Error","checkPropTypes"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AAEA,SAASC,kBAAT;AAYA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,WAAD,EAAcC,oBAAd,EAAuC;AAC3E,MAAMC,CAAC,GAAI,OAAOC,IAAI,CAACC,KAAL,CAAWJ,WAAW,GAAGC,oBAAzB,KAAkD,CAAzD,CAAX;AACA,SAAQH,kBAAkB,CAACI,CAAD,CAAlB,GAAwB,GAAzB,GAAgCF,WAAvC;AACD,CAHM;AAYP,OAAO,IAAMK,IAAI,GAAG,SAAPA,IAAO,CAACC,UAAD,EAAaC,OAAb,EAAyB;AAC3C,MAAID,UAAJ,EAAgB;AACdE,IAAAA,OAAO,CAACH,IAAR,CAAaE,OAAb;AACD;AACF,CAJM;AAeP,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,YAAY;AAAA,SAAI,UAACC,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,EAAoC;AACjF,QAAMC,IAAI,GAAGH,KAAK,CAACC,QAAD,CAAlB;;AAEA,QAAI,OAAOE,IAAP,KAAgB,WAApB,EAAiC;AAC/B,aAAO,IAAIC,KAAJ,iBAAyBF,aAAzB,sCAAP;AACD;;AAED,WAAOhB,SAAS,CAACmB,cAAV,qBACFJ,QADE,EACSF,YADT,uBAEFE,QAFE,EAESE,IAFT,GAGLF,QAHK,EAILC,aAJK,CAAP;AAMD,GAb0C;AAAA,CAApC","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { roundForPercentage } from '../shared/methods';\n\n\n/**\n * Calculates element size to ensure that elements are proportionally stretched\n * so maximum amount of elements fits total size and size never goes below\n * minimal element size.\n *\n * @param {number} totalLength total length of available space\n * @param {number} minimalElementLength minimal length of single element\n * @returns {number}\n */\nexport const calculateStretchLength = (totalLength, minimalElementLength) => {\n  const w = (100 / (Math.floor(totalLength / minimalElementLength) || 1));\n  return (roundForPercentage(w) / 100) * totalLength;\n};\n\n\n/**\n * Logs warning to the console and displays yellow-box message.\n *\n * @param {boolean} shouldWarn\n * @param {string} message\n */\nexport const warn = (shouldWarn, message) => {\n  if (shouldWarn) {\n    console.warn(message); // eslint-disable-line no-console\n  }\n};\n\n\n/**\n * Validates that specified prop exits. This is used to ensure that components\n * are rendered inside grid, by validating that they have expected context\n * props available.\n *\n * @param {any} ProvidedProp validation to run in case prop exists\n * @returns {function(Object, string, string): any}\n */\nexport const checkInsideGrid = ProvidedProp => (props, propName, componentName) => {\n  const prop = props[propName];\n\n  if (typeof prop === 'undefined') {\n    return new Error(`Component \\`${componentName}\\` is rendered outside of \\`Grid\\`.`);\n  }\n\n  return PropTypes.checkPropTypes(\n    { [propName]: ProvidedProp },\n    { [propName]: prop },\n    propName,\n    componentName,\n  );\n};\n"]},"metadata":{},"sourceType":"module"}