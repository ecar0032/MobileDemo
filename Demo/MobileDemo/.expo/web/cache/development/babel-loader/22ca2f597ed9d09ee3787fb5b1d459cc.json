{"ast":null,"code":"export var determineSizeClass = function determineSizeClass(sizeNames, breakpointValues, value) {\n  var lastIndex = sizeNames.length - 1;\n  var preferredSizeClass = sizeNames[lastIndex];\n\n  for (var i = lastIndex; i >= 0; i -= 1) {\n    var sizeClass = sizeNames[i];\n    var breakpointSize = breakpointValues[sizeClass];\n\n    if (breakpointSize !== undefined && breakpointSize <= value) {\n      return sizeClass;\n    }\n\n    preferredSizeClass = sizeClass;\n  }\n\n  return preferredSizeClass;\n};","map":{"version":3,"sources":["C:/Users/mikea/Documents/GitHub/MobileDemo/Demo/MobileDemo/node_modules/react-native-responsive-layout/src/components/grid/methods.js"],"names":["determineSizeClass","sizeNames","breakpointValues","value","lastIndex","length","preferredSizeClass","i","sizeClass","breakpointSize","undefined"],"mappings":"AASA,OAAO,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,SAAD,EAAYC,gBAAZ,EAA8BC,KAA9B,EAAwC;AAExE,MAAMC,SAAS,GAAGH,SAAS,CAACI,MAAV,GAAmB,CAArC;AACA,MAAIC,kBAAkB,GAAGL,SAAS,CAACG,SAAD,CAAlC;;AAEA,OAAK,IAAIG,CAAC,GAAGH,SAAb,EAAwBG,CAAC,IAAI,CAA7B,EAAgCA,CAAC,IAAI,CAArC,EAAwC;AACtC,QAAMC,SAAS,GAAGP,SAAS,CAACM,CAAD,CAA3B;AACA,QAAME,cAAc,GAAGP,gBAAgB,CAACM,SAAD,CAAvC;;AAGA,QAAIC,cAAc,KAAKC,SAAnB,IAAgCD,cAAc,IAAIN,KAAtD,EAA6D;AAC3D,aAAOK,SAAP;AACD;;AAEDF,IAAAA,kBAAkB,GAAGE,SAArB;AACD;;AAED,SAAOF,kBAAP;AACD,CAlBM","sourcesContent":["\n/**\n * Determines active size name from provided breakpoints and element size.\n *\n * @param {Array<string>} sizeNames that grid supports ordered from smallest\n * @param {Object} breakpointValues object containing values for sizes\n * @param {number} value width/height from which to determine active size\n * @return {string} largest size name that is still larger than value\n */\nexport const determineSizeClass = (sizeNames, breakpointValues, value) => {\n  // Start from end to find largest one that is matching\n  const lastIndex = sizeNames.length - 1;\n  let preferredSizeClass = sizeNames[lastIndex];\n\n  for (let i = lastIndex; i >= 0; i -= 1) {\n    const sizeClass = sizeNames[i];\n    const breakpointSize = breakpointValues[sizeClass];\n\n    // If there is matching, early return\n    if (breakpointSize !== undefined && breakpointSize <= value) {\n      return sizeClass;\n    }\n\n    preferredSizeClass = sizeClass;\n  }\n\n  return preferredSizeClass;\n};\n"]},"metadata":{},"sourceType":"module"}