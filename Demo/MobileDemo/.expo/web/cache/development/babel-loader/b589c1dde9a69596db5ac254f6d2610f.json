{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\mikea\\\\Documents\\\\GitHub\\\\MobileDemo\\\\Demo\\\\MobileDemo\\\\node_modules\\\\react-native-responsive-layout\\\\src\\\\components\\\\block\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SIZE_NAMES, GRID_UNITS, VERTICAL } from \"../../shared/constants\";\nimport { roundForPercentage } from \"../../shared/methods\";\nimport { ContainerSizeProp, DirectionProp } from \"../../shared/props\";\nimport { checkInsideGrid } from \"../../utils\";\nimport { determineSize, isHidden } from \"./methods\";\nimport BlockProps from \"./props\";\nvar ONE_UNIT_WIDTH = roundForPercentage(100 / GRID_UNITS) + \"%\";\nvar style = StyleSheet.create({\n  stretchSize: {\n    flex: 1,\n    flexBasis: ONE_UNIT_WIDTH\n  }\n});\n\nvar Block = function Block(_ref, _ref2) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  var gridSizeClass = _ref2.gridSizeClass,\n      gridContentDirection = _ref2.gridContentDirection;\n\n  if (isHidden(SIZE_NAMES, gridSizeClass, props)) {\n    return null;\n  }\n\n  var styleProperty = gridContentDirection === VERTICAL ? 'width' : 'height';\n  var size = determineSize(SIZE_NAMES, gridSizeClass, props);\n\n  var constantSize = _defineProperty({}, styleProperty, size);\n\n  var sizeStyle = size === 'stretch' ? style.stretchSize : constantSize;\n  var directionStyle = {\n    flexDirection: gridContentDirection === VERTICAL ? 'column' : 'row'\n  };\n  return React.createElement(View, {\n    style: [directionStyle, sizeStyle, props.style],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nBlock.defaultProps = {\n  children: null\n};\nBlock.contextTypes = {\n  gridSizeClass: checkInsideGrid(ContainerSizeProp),\n  gridContentDirection: checkInsideGrid(DirectionProp)\n};\nBlock.propTypes = _objectSpread({\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node])\n}, BlockProps);\nexport default Block;","map":{"version":3,"sources":["C:/Users/mikea/Documents/GitHub/MobileDemo/Demo/MobileDemo/node_modules/react-native-responsive-layout/src/components/block/index.js"],"names":["React","PropTypes","SIZE_NAMES","GRID_UNITS","VERTICAL","roundForPercentage","ContainerSizeProp","DirectionProp","checkInsideGrid","determineSize","isHidden","BlockProps","ONE_UNIT_WIDTH","style","StyleSheet","create","stretchSize","flex","flexBasis","Block","children","props","gridSizeClass","gridContentDirection","styleProperty","size","constantSize","sizeStyle","directionStyle","flexDirection","defaultProps","contextTypes","propTypes","oneOfType","arrayOf","node"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAGA,SACEC,UADF,EAEEC,UAFF,EAGEC,QAHF;AAMA,SAASC,kBAAT;AACA,SAASC,iBAAT,EAA4BC,aAA5B;AACA,SAASC,eAAT;AACA,SAASC,aAAT,EAAwBC,QAAxB;AACA,OAAOC,UAAP;AAKA,IAAMC,cAAc,GAAMP,kBAAkB,CAAC,MAAMF,UAAP,CAAxB,MAApB;AAEA,IAAMU,KAAK,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC9BC,EAAAA,WAAW,EAAE;AACXC,IAAAA,IAAI,EAAE,CADK;AAEXC,IAAAA,SAAS,EAAEN;AAFA;AADiB,CAAlB,CAAd;;AAqBA,IAAMO,KAAK,GAAG,SAARA,KAAQ,cAMR;AAAA,MALJC,QAKI,QALJA,QAKI;AAAA,MAJDC,KAIC;;AAAA,MAFJC,aAEI,SAFJA,aAEI;AAAA,MADJC,oBACI,SADJA,oBACI;;AACJ,MAAIb,QAAQ,CAACR,UAAD,EAAaoB,aAAb,EAA4BD,KAA5B,CAAZ,EAAgD;AAC9C,WAAO,IAAP;AACD;;AAGD,MAAMG,aAAa,GAAGD,oBAAoB,KAAKnB,QAAzB,GAAoC,OAApC,GAA8C,QAApE;AAGA,MAAMqB,IAAI,GAAGhB,aAAa,CAACP,UAAD,EAAaoB,aAAb,EAA4BD,KAA5B,CAA1B;;AACA,MAAMK,YAAY,uBAAMF,aAAN,EAAsBC,IAAtB,CAAlB;;AACA,MAAME,SAAS,GAAIF,IAAI,KAAK,SAAV,GAAuBZ,KAAK,CAACG,WAA7B,GAA2CU,YAA7D;AAGA,MAAME,cAAc,GAAG;AACrBC,IAAAA,aAAa,EAAGN,oBAAoB,KAAKnB,QAAzB,GAAoC,QAApC,GAA+C;AAD1C,GAAvB;AAIA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACwB,cAAD,EAAiBD,SAAjB,EAA4BN,KAAK,CAACR,KAAlC,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,QADH,CADF;AAKD,CA7BD;;AA+BAD,KAAK,CAACW,YAAN,GAAqB;AACnBV,EAAAA,QAAQ,EAAE;AADS,CAArB;AAIAD,KAAK,CAACY,YAAN,GAAqB;AACnBT,EAAAA,aAAa,EAAEd,eAAe,CAACF,iBAAD,CADX;AAEnBiB,EAAAA,oBAAoB,EAAEf,eAAe,CAACD,aAAD;AAFlB,CAArB;AAKAY,KAAK,CAACa,SAAN;AACEZ,EAAAA,QAAQ,EAAEnB,SAAS,CAACgC,SAAV,CAAoB,CAC5BhC,SAAS,CAACiC,OAAV,CAAkBjC,SAAS,CAACkC,IAA5B,CAD4B,EAE5BlC,SAAS,CAACkC,IAFkB,CAApB;AADZ,GAKKxB,UALL;AAQA,eAAeQ,KAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyleSheet, View } from 'react-native';\n\nimport {\n  SIZE_NAMES,\n  GRID_UNITS,\n  VERTICAL,\n} from '../../shared/constants';\n\nimport { roundForPercentage } from '../../shared/methods';\nimport { ContainerSizeProp, DirectionProp } from '../../shared/props';\nimport { checkInsideGrid } from '../../utils';\nimport { determineSize, isHidden } from './methods';\nimport BlockProps from './props';\n\n\n// We need to ensure that stretch sizing wouldn't collapse to zero width when\n// there is enough elements to already fill the line.\nconst ONE_UNIT_WIDTH = `${roundForPercentage(100 / GRID_UNITS)}%`;\n\nconst style = StyleSheet.create({\n  stretchSize: {\n    flex: 1,\n    flexBasis: ONE_UNIT_WIDTH,\n  },\n});\n\n/* eslint-disable */\n/**\n * Element representing single cell in grid structure. It only works when nested\n * inside Grid component.\n *\n * It only accepts size classes as arguments:\n * - if there are none provided it will fallback to full width\n * - if there is only `size` provided it will be same on all layouts\n * - otherwise it will choose smallest class defined that is applicable based\n *   on sizing of closest outer `Grid` element\n *\n * @type {React.StatelessComponent<{size?: string | number, hidden?: boolean, visible?: boolean, style?: any, children: any}>}\n */\n/* eslint-enable */\nconst Block = ({\n  children,\n  ...props\n}, {\n  gridSizeClass,\n  gridContentDirection,\n}) => {\n  if (isHidden(SIZE_NAMES, gridSizeClass, props)) {\n    return null;\n  }\n\n  // Which attribute we set depends on direction\n  const styleProperty = gridContentDirection === VERTICAL ? 'width' : 'height';\n\n  // Determine size\n  const size = determineSize(SIZE_NAMES, gridSizeClass, props);\n  const constantSize = { [styleProperty]: size };\n  const sizeStyle = (size === 'stretch') ? style.stretchSize : constantSize;\n\n  // flexDirection depends on direction\n  const directionStyle = {\n    flexDirection: (gridContentDirection === VERTICAL ? 'column' : 'row'),\n  };\n\n  return (\n    <View style={[directionStyle, sizeStyle, props.style]}>\n      {children}\n    </View>\n  );\n};\n\nBlock.defaultProps = {\n  children: null,\n};\n\nBlock.contextTypes = {\n  gridSizeClass: checkInsideGrid(ContainerSizeProp),\n  gridContentDirection: checkInsideGrid(DirectionProp),\n};\n\nBlock.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n  ...BlockProps,\n};\n\nexport default Block;\n"]},"metadata":{},"sourceType":"module"}