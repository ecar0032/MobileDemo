{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { roundForPercentage } from \"./methods\";\nexport var HORIZONTAL = 'horizontal';\nexport var VERTICAL = 'vertical';\nexport var GRID_UNITS = 12;\nvar BREAKPOINTS = [{\n  name: 'xs',\n  size: 320\n}, {\n  name: 'sm',\n  size: 411\n}, {\n  name: 'md',\n  size: 568\n}, {\n  name: 'lg',\n  size: 768\n}, {\n  name: 'xl',\n  size: 1024\n}, {\n  name: 'xxl',\n  size: 1280\n}];\nexport var SIZE_NAMES = BREAKPOINTS.map(function (bp) {\n  return bp.name;\n});\nexport var BREAKPOINT_VALUES = BREAKPOINTS.reduce(function (previous, bp) {\n  return _objectSpread(_objectSpread({}, previous), {}, _defineProperty({}, bp.name, bp.size));\n}, {});\nexport var FRACTION_NAMES = function () {\n  var fractions = ['1'];\n\n  for (var i = 1; i <= GRID_UNITS; i += 1) {\n    for (var j = i; j <= GRID_UNITS; j += 1) {\n      fractions.push(i + \"/\" + j);\n    }\n  }\n\n  return fractions;\n}();\nexport var FRACTION_VALUES = function () {\n  var table = {\n    1: 100\n  };\n\n  for (var i = 1; i <= GRID_UNITS; i += 1) {\n    for (var j = 1; j <= i; j += 1) {\n      table[j + \"/\" + i] = roundForPercentage(j / i * 100.0);\n    }\n  }\n\n  return table;\n}();","map":{"version":3,"sources":["C:/Users/mikea/Documents/GitHub/MobileDemo/Demo/MobileDemo/node_modules/react-native-responsive-layout/src/shared/constants.js"],"names":["roundForPercentage","HORIZONTAL","VERTICAL","GRID_UNITS","BREAKPOINTS","name","size","SIZE_NAMES","map","bp","BREAKPOINT_VALUES","reduce","previous","FRACTION_NAMES","fractions","i","j","push","FRACTION_VALUES","table"],"mappings":";;;;;;AAAA,SAASA,kBAAT;AAMA,OAAO,IAAMC,UAAU,GAAG,YAAnB;AAKP,OAAO,IAAMC,QAAQ,GAAG,UAAjB;AAMP,OAAO,IAAMC,UAAU,GAAG,EAAnB;AAOP,IAAMC,WAAW,GAAG,CAClB;AACEC,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CADkB,EAKlB;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CALkB,EASlB;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CATkB,EAalB;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CAbkB,EAiBlB;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CAjBkB,EAqBlB;AACED,EAAAA,IAAI,EAAE,KADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CArBkB,CAApB;AA8BA,OAAO,IAAMC,UAAU,GAAGH,WAAW,CAACI,GAAZ,CAAgB,UAAAC,EAAE;AAAA,SAAIA,EAAE,CAACJ,IAAP;AAAA,CAAlB,CAAnB;AAKP,OAAO,IAAMK,iBAAiB,GAAGN,WAAW,CAACO,MAAZ,CAC/B,UAACC,QAAD,EAAWH,EAAX;AAAA,yCAAwBG,QAAxB,2BAAmCH,EAAE,CAACJ,IAAtC,EAA6CI,EAAE,CAACH,IAAhD;AAAA,CAD+B,EAE/B,EAF+B,CAA1B;AASP,OAAO,IAAMO,cAAc,GAAI,YAAM;AACnC,MAAMC,SAAS,GAAG,CAAC,GAAD,CAAlB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIZ,UAArB,EAAiCY,CAAC,IAAI,CAAtC,EAAyC;AACvC,SAAK,IAAIC,CAAC,GAAGD,CAAb,EAAgBC,CAAC,IAAIb,UAArB,EAAiCa,CAAC,IAAI,CAAtC,EAAyC;AACvCF,MAAAA,SAAS,CAACG,IAAV,CAAkBF,CAAlB,SAAuBC,CAAvB;AACD;AACF;;AACD,SAAOF,SAAP;AACD,CAR6B,EAAvB;AAaP,OAAO,IAAMI,eAAe,GAAI,YAAM;AACpC,MAAMC,KAAK,GAAG;AAAE,OAAG;AAAL,GAAd;;AACA,OAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIZ,UAArB,EAAiCY,CAAC,IAAI,CAAtC,EAAyC;AACvC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAID,CAArB,EAAwBC,CAAC,IAAI,CAA7B,EAAgC;AAC9BG,MAAAA,KAAK,CAAIH,CAAJ,SAASD,CAAT,CAAL,GAAqBf,kBAAkB,CAAEgB,CAAC,GAAGD,CAAL,GAAU,KAAX,CAAvC;AACD;AACF;;AACD,SAAOI,KAAP;AACD,CAR8B,EAAxB","sourcesContent":["import { roundForPercentage } from './methods';\r\n\r\n\r\n/**\r\n * Grid direction horizontal.\r\n */\r\nexport const HORIZONTAL = 'horizontal';\r\n\r\n/**\r\n * Grid direction vertical.\r\n */\r\nexport const VERTICAL = 'vertical';\r\n\r\n\r\n/**\r\n * Number of columns grid uses.\r\n */\r\nexport const GRID_UNITS = 12;\r\n\r\n\r\n/**\r\n * Pairs on what are grid size prefixes and their respective minimum widths.\r\n * Ordered from the smallest to the largest. It fallbacks to the first one.\r\n */\r\nconst BREAKPOINTS = [\r\n  {\r\n    name: 'xs',\r\n    size: 320,\r\n  },\r\n  {\r\n    name: 'sm',\r\n    size: 411,\r\n  },\r\n  {\r\n    name: 'md',\r\n    size: 568,\r\n  },\r\n  {\r\n    name: 'lg',\r\n    size: 768,\r\n  },\r\n  {\r\n    name: 'xl',\r\n    size: 1024,\r\n  },\r\n  {\r\n    name: 'xxl',\r\n    size: 1280,\r\n  },\r\n];\r\n\r\n/**\r\n * Ordered list of breakpoint size names from smaller to larger.\r\n */\r\nexport const SIZE_NAMES = BREAKPOINTS.map(bp => bp.name);\r\n\r\n/**\r\n * Map of values for given breakpoint size.\r\n */\r\nexport const BREAKPOINT_VALUES = BREAKPOINTS.reduce(\r\n  (previous, bp) => ({ ...previous, [bp.name]: bp.size }),\r\n  {},\r\n);\r\n\r\n\r\n/**\r\n * List of valid fractions.\r\n */\r\nexport const FRACTION_NAMES = (() => {\r\n  const fractions = ['1'];\r\n  for (let i = 1; i <= GRID_UNITS; i += 1) {\r\n    for (let j = i; j <= GRID_UNITS; j += 1) {\r\n      fractions.push(`${i}/${j}`);\r\n    }\r\n  }\r\n  return fractions;\r\n})();\r\n\r\n/**\r\n * Generated table of width percentages for fractions.\r\n */\r\nexport const FRACTION_VALUES = (() => {\r\n  const table = { 1: 100 };\r\n  for (let i = 1; i <= GRID_UNITS; i += 1) {\r\n    for (let j = 1; j <= i; j += 1) {\r\n      table[`${j}/${i}`] = roundForPercentage((j / i) * 100.0);\r\n    }\r\n  }\r\n  return table;\r\n})();\r\n"]},"metadata":{},"sourceType":"module"}