{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\mikea\\\\Documents\\\\GitHub\\\\MobileDemo\\\\Demo\\\\MobileDemo\\\\node_modules\\\\react-native-responsive-layout\\\\src\\\\components\\\\grid\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport { BREAKPOINT_VALUES, SIZE_NAMES, HORIZONTAL, VERTICAL } from \"../../shared/constants\";\nimport { ContainerSizeProp, DirectionProp } from \"../../shared/props\";\nimport { determineSizeClass } from \"./methods\";\nimport { BreakpointsProp } from \"./props\";\nimport SizeSubscriber from \"./Subscriber\";\nimport Scrollable from \"./Scrollable\";\nvar styles = StyleSheet.create({\n  horizontal: {\n    flexDirection: 'row',\n    alignItems: 'flex-start'\n  },\n  vertical: {\n    flexDirection: 'column',\n    alignItems: 'flex-start'\n  },\n  stretchable: {\n    flex: 1\n  }\n});\n\nvar Grid = function (_Component) {\n  _inherits(Grid, _Component);\n\n  var _super = _createSuper(Grid);\n\n  function Grid(props, context) {\n    var _this;\n\n    _classCallCheck(this, Grid);\n\n    _this = _super.call(this, props, context);\n\n    _this.getChildContext = function () {\n      return {\n        gridContentDirection: _this.props.horizontal ? HORIZONTAL : VERTICAL,\n        gridSizeClass: _this.state.gridSizeClass,\n        gridStretch: _this.props.stretchable,\n        gridSizeProvider: _this.state.gridSizeProvider,\n        referenceSizeProvider: _this.state.referenceSizeProvider\n      };\n    };\n\n    _this.onLayoutHandler = function (_ref) {\n      var _ref$nativeEvent$layo = _ref.nativeEvent.layout,\n          width = _ref$nativeEvent$layo.width,\n          height = _ref$nativeEvent$layo.height;\n\n      if (_this.props.relativeTo === 'self') {\n        _this.updateSizeClass(width, height);\n      }\n\n      _this.updateSizeProvider(width, height);\n    };\n\n    _this.determineSize = function (breakpoints, horizontal, width, height) {\n      return determineSizeClass(SIZE_NAMES, breakpoints, horizontal ? height : width);\n    };\n\n    _this.windowResizeHandler = function (_ref2) {\n      var _ref2$window = _ref2.window,\n          width = _ref2$window.width,\n          height = _ref2$window.height;\n\n      if (_this.props.relativeTo === 'window' || _this.props.relativeTo === 'parent' && _this.context.referenceSizeProvider === null) {\n        _this.updateSizeClass(width, height);\n      }\n    };\n\n    _this.updateSizeClass = function (width, height) {\n      var size = _this.determineSize(_this.props.breakpoints, _this.props.horizontal, width, height);\n\n      if (size !== _this.state.gridSizeClass) {\n        _this.setState({\n          gridSizeClass: size\n        });\n      }\n    };\n\n    _this.updateSizeProvider = function (width, height) {\n      _this.state.gridSizeProvider.update(width, height);\n    };\n\n    var _width = 0;\n    var _height = 0;\n    var gridComponentSizeProvider = new SizeSubscriber();\n    var childrenReferenceSizeSubscriber;\n\n    if (props.relativeTo === 'window') {\n      childrenReferenceSizeSubscriber = null;\n\n      var _Dimensions$get = Dimensions.get('window');\n\n      _width = _Dimensions$get.width;\n      _height = _Dimensions$get.height;\n    } else if (props.relativeTo === 'self') {\n      childrenReferenceSizeSubscriber = gridComponentSizeProvider;\n    } else if (props.relativeTo === 'parent') {\n      childrenReferenceSizeSubscriber = context.referenceSizeProvider;\n\n      if (context.referenceSizeProvider === null) {\n        var _Dimensions$get2 = Dimensions.get('window');\n\n        _width = _Dimensions$get2.width;\n        _height = _Dimensions$get2.height;\n      }\n    }\n\n    _this.state = {\n      gridSizeClass: _this.determineSize(props.breakpoints, props.horizontal, _width, _height),\n      gridSizeProvider: gridComponentSizeProvider,\n      referenceSizeProvider: childrenReferenceSizeSubscriber\n    };\n    return _this;\n  }\n\n  _createClass(Grid, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Dimensions.addEventListener('change', this.windowResizeHandler);\n\n      if (this.props.relativeTo === 'parent') {\n        if (this.context.referenceSizeProvider) {\n          this.context.referenceSizeProvider.subscribe(this.updateSizeClass);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.windowResizeHandler);\n\n      if (this.props.relativeTo === 'parent') {\n        if (this.context.referenceSizeProvider) {\n          this.context.referenceSizeProvider.unsubscribe(this.updateSizeClass);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var view = React.createElement(View, {\n        style: [this.props.horizontal ? styles.horizontal : styles.vertical, this.props.stretchable ? styles.stretchable : null, this.props.style],\n        onLayout: this.onLayoutHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 7\n        }\n      }, this.state.gridSizeClass ? this.props.children : null);\n\n      if (!this.props.scrollable) {\n        return view;\n      }\n\n      return React.createElement(Scrollable, {\n        horizontal: this.props.horizontal,\n        stretch: this.props.stretchable,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 7\n        }\n      }, view);\n    }\n  }]);\n\n  return Grid;\n}(Component);\n\nGrid.propTypes = {\n  breakpoints: BreakpointsProp,\n  horizontal: PropTypes.bool,\n  scrollable: PropTypes.bool,\n  relativeTo: PropTypes.oneOf(['parent', 'self', 'window']),\n  style: ViewPropTypes.style,\n  stretchable: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired\n};\nGrid.defaultProps = {\n  breakpoints: BREAKPOINT_VALUES,\n  horizontal: false,\n  scrollable: false,\n  relativeTo: 'window',\n  style: {},\n  stretchable: false\n};\nGrid.childContextTypes = {\n  gridContentDirection: DirectionProp,\n  gridSizeClass: ContainerSizeProp,\n  gridStretch: PropTypes.bool,\n  gridSizeProvider: PropTypes.shape({\n    subscribe: PropTypes.func.isRequired,\n    unsubscribe: PropTypes.func.isRequired\n  }),\n  referenceSizeProvider: PropTypes.shape({\n    subscribe: PropTypes.func.isRequired,\n    unsubscribe: PropTypes.func.isRequired\n  })\n};\nGrid.contextTypes = {\n  referenceSizeProvider: PropTypes.shape({\n    subscribe: PropTypes.func.isRequired,\n    unsubscribe: PropTypes.func.isRequired\n  })\n};\nexport default Grid;","map":{"version":3,"sources":["C:/Users/mikea/Documents/GitHub/MobileDemo/Demo/MobileDemo/node_modules/react-native-responsive-layout/src/components/grid/index.js"],"names":["React","Component","PropTypes","ViewPropTypes","BREAKPOINT_VALUES","SIZE_NAMES","HORIZONTAL","VERTICAL","ContainerSizeProp","DirectionProp","determineSizeClass","BreakpointsProp","SizeSubscriber","Scrollable","styles","StyleSheet","create","horizontal","flexDirection","alignItems","vertical","stretchable","flex","Grid","props","context","getChildContext","gridContentDirection","gridSizeClass","state","gridStretch","gridSizeProvider","referenceSizeProvider","onLayoutHandler","nativeEvent","layout","width","height","relativeTo","updateSizeClass","updateSizeProvider","determineSize","breakpoints","windowResizeHandler","window","size","setState","update","gridComponentSizeProvider","childrenReferenceSizeSubscriber","Dimensions","get","addEventListener","subscribe","removeEventListener","unsubscribe","view","style","children","scrollable","propTypes","bool","oneOf","oneOfType","arrayOf","node","isRequired","defaultProps","childContextTypes","shape","func","contextTypes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Dimensions, StyleSheet, View, ViewPropTypes } from 'react-native';\r\n\r\nimport {\r\n  BREAKPOINT_VALUES,\r\n  SIZE_NAMES,\r\n  HORIZONTAL,\r\n  VERTICAL,\r\n} from '../../shared/constants';\r\n\r\nimport { ContainerSizeProp, DirectionProp } from '../../shared/props';\r\nimport { determineSizeClass } from './methods';\r\nimport { BreakpointsProp } from './props';\r\nimport SizeSubscriber from './Subscriber';\r\nimport Scrollable from './Scrollable';\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  horizontal: {\r\n    flexDirection: 'row',\r\n    alignItems: 'flex-start',\r\n  },\r\n  vertical: {\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n  },\r\n  stretchable: {\r\n    flex: 1,\r\n  },\r\n});\r\n\r\n/* eslint-disable */\r\n/**\r\n * Grid that defines how nested `Section` and `Block` components should behave.\r\n *\r\n * You can determine what object is being referenced to determine size using\r\n * `relativeTo`, as well on which sizes should size classes cascade using\r\n * `breakpoints` and control flow of objects using `direction`.\r\n *\r\n * Using `relativeTo` set to 'self' can have performance impact since it must\r\n * determine whether children components are impacted by resize.\r\n *\r\n * @augments {Component<{breakpoints?: Object, horizontal?: boolean, scrollable?: boolean, relativeTo?: 'window' | 'self' | 'parent', stretchable?: boolean, style?: any, children: any}>}\r\n */\r\n/* eslint-enable */\r\nclass Grid extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    let width = 0;\r\n    let height = 0;\r\n\r\n    // Subscriber for components nested inside that that take grid size.\r\n    const gridComponentSizeProvider = new SizeSubscriber();\r\n    // Create subscriber used to resolve parent size dependencies in children.\r\n    let childrenReferenceSizeSubscriber;\r\n\r\n    /*\r\n      Regarding inheritance of reference size provider:\r\n      This table shows depending on current grid and parent grid what should\r\n      be provided further down the chain.\r\n\r\n             (parent -- first outer grid)\r\n             | parent |  self  | window |\r\n      -------|--------------------------|\r\n      parent | parent | parent | parent |\r\n        self |  self  |  self  |  self  |\r\n      window |  null  |  null  |  null  |\r\n      -------|--------------------------|\r\n\r\n    */\r\n\r\n    if (props.relativeTo === 'window') {\r\n      // When size is not inherited from the parent, do not pass anything.\r\n      childrenReferenceSizeSubscriber = null;\r\n      // Fetch dimensions immediately and subscribe later.\r\n      ({ width, height } = Dimensions.get('window'));\r\n    } else if (props.relativeTo === 'self') {\r\n      // When it is based on current element, pass on the current element.\r\n      childrenReferenceSizeSubscriber = gridComponentSizeProvider;\r\n      // Dimensions will be determined once onLayout is called.\r\n    } else if (props.relativeTo === 'parent') {\r\n      // When it is based on parent, simply pass it further down the chain.\r\n      childrenReferenceSizeSubscriber = context.referenceSizeProvider;\r\n\r\n      // When parent element is relative to window, we need to fetch dimensions\r\n      // manually just like in relativeTo='window' case, since it won't get\r\n      // re-rendered until the orientation changes so it would have the default\r\n      // values of 0, 0.\r\n      if (context.referenceSizeProvider === null) {\r\n        ({ width, height } = Dimensions.get('window'));\r\n      }\r\n\r\n      // When parent element is relative to self, simply the fact that this\r\n      // component will be rendered will trigger onLayout of parent element.\r\n    }\r\n\r\n    this.state = {\r\n      gridSizeClass: this.determineSize(props.breakpoints, props.horizontal, width, height),\r\n      gridSizeProvider: gridComponentSizeProvider,\r\n      referenceSizeProvider: childrenReferenceSizeSubscriber,\r\n    };\r\n  }\r\n\r\n  getChildContext = () => ({\r\n    gridContentDirection: (this.props.horizontal ? HORIZONTAL : VERTICAL),\r\n    gridSizeClass: this.state.gridSizeClass,\r\n    gridStretch: this.props.stretchable,\r\n    gridSizeProvider: this.state.gridSizeProvider,\r\n    referenceSizeProvider: this.state.referenceSizeProvider,\r\n  });\r\n\r\n  componentDidMount() {\r\n    Dimensions.addEventListener('change', this.windowResizeHandler);\r\n\r\n    // Subscribe to parent updates if they provide them and parent provides them\r\n    if (this.props.relativeTo === 'parent') {\r\n      if (this.context.referenceSizeProvider) {\r\n        this.context.referenceSizeProvider.subscribe(this.updateSizeClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    Dimensions.removeEventListener('change', this.windowResizeHandler);\r\n\r\n    // On unmount we need to unsubscribe from parent subscriber.\r\n    if (this.props.relativeTo === 'parent') {\r\n      if (this.context.referenceSizeProvider) {\r\n        this.context.referenceSizeProvider.unsubscribe(this.updateSizeClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  onLayoutHandler = ({ nativeEvent: { layout: { width, height } } }) => {\r\n    if (this.props.relativeTo === 'self') {\r\n      this.updateSizeClass(width, height);\r\n    }\r\n    this.updateSizeProvider(width, height);\r\n  };\r\n\r\n  /**\r\n   * Helper function that calculates all state (context) values.\r\n   */\r\n  determineSize = (breakpoints, horizontal, width, height) => determineSizeClass(\r\n    SIZE_NAMES,\r\n    breakpoints,\r\n    (horizontal ? height : width),\r\n  );\r\n\r\n  /**\r\n   * Handler for window size changes when grid is relative to it.\r\n   */\r\n  windowResizeHandler = ({ window: { width, height } }) => {\r\n    // Look into constructor to find more details about this implementation.\r\n    if (\r\n      (this.props.relativeTo === 'window') ||\r\n      (this.props.relativeTo === 'parent' && this.context.referenceSizeProvider === null)\r\n    ) {\r\n      this.updateSizeClass(width, height);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handler that will only update state if size really happened to avoid\r\n   * useless re-rendering.\r\n   */\r\n  updateSizeClass = (width, height) => {\r\n    const size = this.determineSize(this.props.breakpoints, this.props.horizontal, width, height);\r\n    if (size !== this.state.gridSizeClass) {\r\n      this.setState({ gridSizeClass: size });\r\n    }\r\n  }\r\n\r\n  updateSizeProvider = (width, height) => {\r\n    // Propagate size change to subscribed entities.\r\n    this.state.gridSizeProvider.update(width, height);\r\n  }\r\n\r\n  render() {\r\n    const view = (\r\n      <View\r\n        style={[\r\n          (this.props.horizontal ? styles.horizontal : styles.vertical),\r\n          this.props.stretchable ? styles.stretchable : null,\r\n          this.props.style,\r\n        ]}\r\n        onLayout={this.onLayoutHandler}\r\n      >\r\n        {this.state.gridSizeClass ? this.props.children : null}\r\n      </View>\r\n    );\r\n\r\n    if (!this.props.scrollable) {\r\n      return view;\r\n    }\r\n\r\n    return (\r\n      <Scrollable\r\n        horizontal={this.props.horizontal}\r\n        stretch={this.props.stretchable}\r\n      >\r\n        {view}\r\n      </Scrollable>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nGrid.propTypes = {\r\n  breakpoints: BreakpointsProp,\r\n  horizontal: PropTypes.bool,\r\n  scrollable: PropTypes.bool,\r\n  relativeTo: PropTypes.oneOf(['parent', 'self', 'window']),\r\n  style: ViewPropTypes.style,\r\n  stretchable: PropTypes.bool,\r\n\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node,\r\n  ]).isRequired,\r\n};\r\n\r\n\r\nGrid.defaultProps = {\r\n  breakpoints: BREAKPOINT_VALUES,\r\n  horizontal: false,\r\n  scrollable: false,\r\n  relativeTo: 'window',\r\n  style: {},\r\n  stretchable: false,\r\n};\r\n\r\n\r\nGrid.childContextTypes = {\r\n  /**\r\n   * Determines how content should flow in both Section and Block element.\r\n   * It is always based on provided direction prop.\r\n   */\r\n  gridContentDirection: DirectionProp,\r\n  /**\r\n   * Grid will determine gridSizeClass that children will receive based\r\n   * on current grid size and merge of provided and default breakpoints.\r\n   */\r\n  gridSizeClass: ContainerSizeProp,\r\n  /**\r\n   * Whether grid should stretch available space.\r\n   */\r\n  gridStretch: PropTypes.bool,\r\n  /**\r\n   * Provider of width and height changes in containing grids. Components nested\r\n   * inside grid that depend on its size will subscribe to this.\r\n   */\r\n  gridSizeProvider: PropTypes.shape({\r\n    subscribe: PropTypes.func.isRequired,\r\n    unsubscribe: PropTypes.func.isRequired,\r\n  }),\r\n  /**\r\n   * Provider of width and height changes in grids that refer to parent.\r\n   * Grids nested inside that are relative to its parent will subscribe to this.\r\n   */\r\n  referenceSizeProvider: PropTypes.shape({\r\n    subscribe: PropTypes.func.isRequired,\r\n    unsubscribe: PropTypes.func.isRequired,\r\n  }),\r\n};\r\n\r\nGrid.contextTypes = {\r\n  referenceSizeProvider: PropTypes.shape({\r\n    subscribe: PropTypes.func.isRequired,\r\n    unsubscribe: PropTypes.func.isRequired,\r\n  }),\r\n};\r\n\r\nexport default Grid;\r\n"]},"metadata":{},"sourceType":"module"}