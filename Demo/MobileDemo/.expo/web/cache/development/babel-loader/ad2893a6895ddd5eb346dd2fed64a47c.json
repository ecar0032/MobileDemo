{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar SizeSubscriber = function () {\n  function SizeSubscriber() {\n    _classCallCheck(this, SizeSubscriber);\n\n    this.observers = [];\n    this.width = 0;\n    this.height = 0;\n  }\n\n  _createClass(SizeSubscriber, [{\n    key: \"subscribe\",\n    value: function subscribe(observer) {\n      if (typeof observer !== 'function') {\n        throw new Error('Expected function as an argument.');\n      }\n\n      this.observers.push(observer);\n      observer(this.width, this.height);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(observer) {\n      this.observers = this.observers.filter(function (element) {\n        return element !== observer;\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(width, height) {\n      if (this.width === width && this.height === height) return;\n      this.width = width;\n      this.height = height;\n      this.observers.forEach(function (observer) {\n        return observer(width, height);\n      });\n    }\n  }]);\n\n  return SizeSubscriber;\n}();\n\nexport default SizeSubscriber;","map":{"version":3,"sources":["C:/Users/mikea/Documents/GitHub/MobileDemo/Demo/MobileDemo/node_modules/react-native-responsive-layout/src/components/grid/Subscriber.js"],"names":["SizeSubscriber","observers","width","height","observer","Error","push","filter","element","forEach"],"mappings":";;;IAIMA,c;;;;SACJC,S,GAAY,E;SACZC,K,GAAQ,C;SACRC,M,GAAS,C;;;;;8BAOCC,Q,EAAU;AAClB,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,cAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACD;;AAED,WAAKJ,SAAL,CAAeK,IAAf,CAAoBF,QAApB;AACAA,MAAAA,QAAQ,CAAC,KAAKF,KAAN,EAAa,KAAKC,MAAlB,CAAR;AACD;;;gCAOWC,Q,EAAU;AACpB,WAAKH,SAAL,GAAiB,KAAKA,SAAL,CAAeM,MAAf,CAAsB,UAAAC,OAAO;AAAA,eAAIA,OAAO,KAAKJ,QAAhB;AAAA,OAA7B,CAAjB;AACD;;;2BAQMF,K,EAAOC,M,EAAQ;AACpB,UAAI,KAAKD,KAAL,KAAeA,KAAf,IAAwB,KAAKC,MAAL,KAAgBA,MAA5C,EAAoD;AAEpD,WAAKD,KAAL,GAAaA,KAAb;AACA,WAAKC,MAAL,GAAcA,MAAd;AACA,WAAKF,SAAL,CAAeQ,OAAf,CAAuB,UAAAL,QAAQ;AAAA,eAAIA,QAAQ,CAACF,KAAD,EAAQC,MAAR,CAAZ;AAAA,OAA/B;AACD;;;;;;AAGH,eAAeH,cAAf","sourcesContent":["\n/**\n * Subscriber pattern implementation.\n */\nclass SizeSubscriber {\n  observers = [];\n  width = 0;\n  height = 0;\n\n  /**\n   * Add an observer which will be notified on size changes.\n   *\n   * @param {function(number, number): void} observer\n   */\n  subscribe(observer) {\n    if (typeof observer !== 'function') {\n      throw new Error('Expected function as an argument.');\n    }\n\n    this.observers.push(observer);\n    observer(this.width, this.height);\n  }\n\n  /**\n   * Remove previously added observer from list of observers.\n   *\n   * @param {function(number, number): void} observer\n   */\n  unsubscribe(observer) {\n    this.observers = this.observers.filter(element => element !== observer);\n  }\n\n  /**\n   * Update all observers of change in size.\n   *\n   * @param {number} width\n   * @param {number} height\n   */\n  update(width, height) {\n    if (this.width === width && this.height === height) return;\n\n    this.width = width;\n    this.height = height;\n    this.observers.forEach(observer => observer(width, height));\n  }\n}\n\nexport default SizeSubscriber;\n"]},"metadata":{},"sourceType":"module"}